result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
ggplot(iteration_scores, aes(x=nclusters, y=iteration_scores)) + geom_point()
iteration_scores$iteration_scores <- (iteration_scores$`nclusters`/max(iteration_scores$`nclusters`)) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
ggplot(iteration_scores, aes(x=nclusters, y=iteration_scores)) + geom_point()
information_list[[4]]
iteration_scores$iteration_scores <- (1/(iteration_scores$`nclusters`/max(iteration_scores$`nclusters`))) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
ggplot(iteration_scores, aes(x=nclusters, y=iteration_scores)) + geom_point()
ggplot(iteration_scores, aes(x=nclusters, y=clusteroverlap)) + geom_point()
ggplot(iteration_scores, aes(x=nclusters, y=clusteroverlap/nclusters)) + geom_point()
## sets sample size
n <- (nrow(frame_punt_events_df)/22)-1
## makes list containing 3 punt dataframes for every 1 in sample
punts_lists <- list()
for (i in 1:n) {
spec_punt_df <- frame_punt_events_df[frame_punt_events_df$gameId==punt_index_df[i,]$gameId & frame_punt_events_df$playId==punt_index_df[i,]$playId,]
spec_punt_df$punt_id <- i
spec_punt_df <- spec_punt_df[order(spec_punt_df$x),]
spec_punt_df <- spec_punt_df[-c(1, 22), ]
# spec_punt_home_df <- spec_punt_df[spec_punt_df$team=="home",]
# spec_punt_away_df <- spec_punt_df[spec_punt_df$team=="away",]
spec_punt_punting_df <- spec_punt_df[spec_punt_df$possessionTeam==spec_punt_df$TeamAbbr,]
spec_punt_punting_df <- rbind(spec_punt_punting_df[spec_punt_punting_df$position=="P",],spec_punt_punting_df[spec_punt_punting_df$position!="P",])
spec_punt_punting_df <- spec_punt_punting_df[order(spec_punt_punting_df$y,spec_punt_punting_df$x),]
spec_punt_receiving_df <- spec_punt_df[spec_punt_df$possessionTeam!=spec_punt_df$TeamAbbr,]
spec_punt_receiving_df <- rbind(spec_punt_receiving_df[spec_punt_receiving_df$x==max(spec_punt_receiving_df$x),],spec_punt_receiving_df[spec_punt_receiving_df$x!=max(spec_punt_receiving_df$x),])
spec_punt_receiving_df <- spec_punt_receiving_df[order(spec_punt_receiving_df$y,spec_punt_receiving_df$x),]
punts_lists <- append(punts_lists, list(spec_punt_df, spec_punt_punting_df, spec_punt_receiving_df))
}
all_punts <- punts_lists
index_vec <- c(rep(0,n)) #needs to be outside loop
info_df <- as.data.frame(matrix(NA, ncol = n, nrow = n))
info_df[1,] <- c(1:n)
new_n <- n
iteration_scores <- as.data.frame(matrix(0, ncol = 2, nrow = n))
colnames(iteration_scores) <- c("nclusters", "clusteroverlap")
iteration_scores[new_n, 1] <- new_n
information_list <- list()
preserved_cluster <- NA
while (n>=2) {
if (is.na(preserved_cluster)==FALSE) {
dist_mat <- dist_mat[-unpreserved_cluster,-unpreserved_cluster]
dist_vec1 <- c(1:(n))
dist_vec1 <- sapply(dist_vec1, function(x) jaccard(preserved_cluster, x, punts_lists)^(1-((length(ids_in_cluster))/(new_n/2))))
# dist_vec1 <- sapply(dist_vec1, function(x) (mean(init_mat[ids_in_cluster, x])+mean(init_mat[x, ids_in_cluster]))^(1-((length(ids_in_cluster))/(new_n/2))))
dist_vec2 <- c(rep(0, (preserved_cluster-1)), dist_vec1[preserved_cluster:(n)])
dist_mat[,preserved_cluster] <- dist_vec1
dist_mat[preserved_cluster,] <- dist_vec2
dist_mat[lower.tri(dist_mat, diag=TRUE)] <- 0
} else {
init_mat <- mdmat(n, punts_lists)
init_mat[init_mat==Inf] <- 0
dist_mat <- init_mat
print("init matrix complete")
}
loc_mat <- as.data.frame(which(dist_mat==max(dist_mat), arr.ind=TRUE))
minrow <- as.numeric(loc_mat$row[1])
mincol <- as.numeric(loc_mat$col[1])
preserved_cluster <- min(c(mincol, minrow))
unpreserved_cluster <- max(c(mincol, minrow))
preserved_cluster_id <- preserved_cluster+index_vec[preserved_cluster]
unpreserved_cluster_id <- unpreserved_cluster+index_vec[unpreserved_cluster]
## takes mean of two closest punts and sets it as new value for the first punt
## e.g. if punt 6 and 12 are closest, takes the means of x and y and updates punt 6 with new values
punts_lists[[3*preserved_cluster]]$x <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster]]$x +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster]]$x)
punts_lists[[3*preserved_cluster]]$y <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster]]$y +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster]]$y)
punts_lists[[3*preserved_cluster-1]]$x <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-1]]$x +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-1]]$x)
punts_lists[[3*preserved_cluster-1]]$y <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-1]]$y +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-1]]$y)
punts_lists[[3*preserved_cluster-2]]$x <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-2]]$x +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-2]]$x)
punts_lists[[3*preserved_cluster-2]]$y <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-2]]$y +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-2]]$y)
## removes latter punt (12 in example above)
punts_lists <- punts_lists[-(3*unpreserved_cluster)]
punts_lists <- punts_lists[-(3*unpreserved_cluster-1)]
punts_lists <- punts_lists[-(3*unpreserved_cluster-2)]
index_vec[unpreserved_cluster:new_n] <- index_vec[unpreserved_cluster:new_n]+1
index_vec <- index_vec[-unpreserved_cluster]
ids_in_cluster <- c(as.vector(na.omit(info_df[,preserved_cluster_id])),as.vector(na.omit(info_df[,unpreserved_cluster_id])))
info_df[,preserved_cluster_id] <- c(ids_in_cluster,rep(NA,new_n-length(ids_in_cluster)))
info_df[,unpreserved_cluster_id] <- NA
if (n == new_n) {
iteration_scores[1, 1] <- 1
iteration_scores[1, 2] <- mean(dist_mat[is.finite(dist_mat)])
}
cluster_df <- as.data.frame(info_df[,colSums(is.na(info_df))<nrow(info_df)])
information_list[[n-1]] <- cluster_df
nonzero_clusters <- as.data.frame(cluster_df[,colSums(is.na(cluster_df))<(nrow(cluster_df)-1)])
total_cluster_distances <- 0
if (!is.null(ncol(nonzero_clusters))) {
cluster_dist <- apply(nonzero_clusters, 2, function(x) clusterdistance(length(na.omit(x)), na.omit(x), init_mat)/(length(na.omit(x))))
# cluster_dist <- c(1:ncol(nonzero_clusters))
# for (i in 1:ncol(nonzero_clusters)) {
#   cluster_dist[i] <- mean(make_dist_mat2(length(na.omit(nonzero_clusters[,i])), nonzero_clusters[,i][!is.na(nonzero_clusters[,i])], init_mat)[is.finite(make_dist_mat2(length(na.omit(nonzero_clusters[,i])), nonzero_clusters[,i][!is.na(nonzero_clusters[,i])], init_mat))])
# }
total_cluster_distances <- sum(cluster_dist)
} else {
total_cluster_distances <- mdmat(nonzero_clusters[1], nonzero_clusters[2], all_punts)
}
total_cluster_distances <- total_cluster_distances/ncol(cluster_df)
iteration_scores[n-1, 1] <- ncol(cluster_df)
iteration_scores[n-1, 2] <- total_cluster_distances
iteration_scores$totaloverlap <- iteration_scores$`nclusters`*iteration_scores$`clusteroverlap`
n <- n-1
}
iteration_scores$iteration_scores <- (1/(iteration_scores$`nclusters`/max(iteration_scores$`nclusters`))) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
ggplot(iteration_scores, aes(x=nclusters, y=iteration_scores)) + geom_point()
result
View(result)
mincluster
View(result)
sort((filt_punt_events_df$frames_after_snap))
for (frame_id in c(1)) {
frame_punt_events_df <- filt_punt_events_df[filt_punt_events_df$frames_after_snap==frame_id,]
frame_punt_events_df<- frame_punt_events_df[order(frame_punt_events_df$x),]
punt_index_df <- (unique(data.frame(gameId=frame_punt_events_df$gameId, playId=frame_punt_events_df$playId)))
punt_index_df$punt_id <- 1:nrow(punt_index_df)
row.names(punt_index_df) <- NULL
}
## sets sample size
n <- (nrow(frame_punt_events_df)/22)-1
## makes list containing 3 punt dataframes for every 1 in sample
punts_lists <- list()
for (i in 1:n) {
spec_punt_df <- frame_punt_events_df[frame_punt_events_df$gameId==punt_index_df[i,]$gameId & frame_punt_events_df$playId==punt_index_df[i,]$playId,]
spec_punt_df$punt_id <- i
spec_punt_df <- spec_punt_df[order(spec_punt_df$x),]
spec_punt_df <- spec_punt_df[-c(1, 22), ]
# spec_punt_home_df <- spec_punt_df[spec_punt_df$team=="home",]
# spec_punt_away_df <- spec_punt_df[spec_punt_df$team=="away",]
spec_punt_punting_df <- spec_punt_df[spec_punt_df$possessionTeam==spec_punt_df$TeamAbbr,]
spec_punt_punting_df <- rbind(spec_punt_punting_df[spec_punt_punting_df$position=="P",],spec_punt_punting_df[spec_punt_punting_df$position!="P",])
spec_punt_punting_df <- spec_punt_punting_df[order(spec_punt_punting_df$y,spec_punt_punting_df$x),]
spec_punt_receiving_df <- spec_punt_df[spec_punt_df$possessionTeam!=spec_punt_df$TeamAbbr,]
spec_punt_receiving_df <- rbind(spec_punt_receiving_df[spec_punt_receiving_df$x==max(spec_punt_receiving_df$x),],spec_punt_receiving_df[spec_punt_receiving_df$x!=max(spec_punt_receiving_df$x),])
spec_punt_receiving_df <- spec_punt_receiving_df[order(spec_punt_receiving_df$y,spec_punt_receiving_df$x),]
punts_lists <- append(punts_lists, list(spec_punt_df, spec_punt_punting_df, spec_punt_receiving_df))
}
all_punts <- punts_lists
index_vec <- c(rep(0,n)) #needs to be outside loop
info_df <- as.data.frame(matrix(NA, ncol = n, nrow = n))
info_df[1,] <- c(1:n)
new_n <- n
iteration_scores <- as.data.frame(matrix(0, ncol = 2, nrow = n))
colnames(iteration_scores) <- c("nclusters", "clusteroverlap")
iteration_scores[new_n, 1] <- new_n
information_list <- list()
preserved_cluster <- NA
while (n>=2) {
if (is.na(preserved_cluster)==FALSE) {
dist_mat <- dist_mat[-unpreserved_cluster,-unpreserved_cluster]
dist_vec1 <- c(1:(n))
dist_vec1 <- sapply(dist_vec1, function(x) jaccard(preserved_cluster, x, punts_lists)^(1-((length(ids_in_cluster))/(new_n/2))))
# dist_vec1 <- sapply(dist_vec1, function(x) (mean(init_mat[ids_in_cluster, x])+mean(init_mat[x, ids_in_cluster]))^(1-((length(ids_in_cluster))/(new_n/2))))
dist_vec2 <- c(rep(0, (preserved_cluster-1)), dist_vec1[preserved_cluster:(n)])
dist_mat[,preserved_cluster] <- dist_vec1
dist_mat[preserved_cluster,] <- dist_vec2
dist_mat[lower.tri(dist_mat, diag=TRUE)] <- 0
} else {
init_mat <- mdmat(n, punts_lists)
init_mat[init_mat==Inf] <- 0
dist_mat <- init_mat
print("init matrix complete")
}
loc_mat <- as.data.frame(which(dist_mat==max(dist_mat), arr.ind=TRUE))
minrow <- as.numeric(loc_mat$row[1])
mincol <- as.numeric(loc_mat$col[1])
preserved_cluster <- min(c(mincol, minrow))
unpreserved_cluster <- max(c(mincol, minrow))
preserved_cluster_id <- preserved_cluster+index_vec[preserved_cluster]
unpreserved_cluster_id <- unpreserved_cluster+index_vec[unpreserved_cluster]
## takes mean of two closest punts and sets it as new value for the first punt
## e.g. if punt 6 and 12 are closest, takes the means of x and y and updates punt 6 with new values
punts_lists[[3*preserved_cluster]]$x <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster]]$x +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster]]$x)
punts_lists[[3*preserved_cluster]]$y <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster]]$y +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster]]$y)
punts_lists[[3*preserved_cluster-1]]$x <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-1]]$x +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-1]]$x)
punts_lists[[3*preserved_cluster-1]]$y <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-1]]$y +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-1]]$y)
punts_lists[[3*preserved_cluster-2]]$x <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-2]]$x +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-2]]$x)
punts_lists[[3*preserved_cluster-2]]$y <- (1/(length(as.vector(na.omit(info_df[,preserved_cluster_id])))+length(as.vector(na.omit(info_df[,unpreserved_cluster_id])))))*
((length(as.vector(na.omit(info_df[,preserved_cluster_id]))))*punts_lists[[3*preserved_cluster-2]]$y +
(length(as.vector(na.omit(info_df[,unpreserved_cluster_id]))))*punts_lists[[3*unpreserved_cluster-2]]$y)
## removes latter punt (12 in example above)
punts_lists <- punts_lists[-(3*unpreserved_cluster)]
punts_lists <- punts_lists[-(3*unpreserved_cluster-1)]
punts_lists <- punts_lists[-(3*unpreserved_cluster-2)]
index_vec[unpreserved_cluster:new_n] <- index_vec[unpreserved_cluster:new_n]+1
index_vec <- index_vec[-unpreserved_cluster]
ids_in_cluster <- c(as.vector(na.omit(info_df[,preserved_cluster_id])),as.vector(na.omit(info_df[,unpreserved_cluster_id])))
info_df[,preserved_cluster_id] <- c(ids_in_cluster,rep(NA,new_n-length(ids_in_cluster)))
info_df[,unpreserved_cluster_id] <- NA
if (n == new_n) {
iteration_scores[1, 1] <- 1
iteration_scores[1, 2] <- mean(dist_mat[is.finite(dist_mat)])
}
cluster_df <- as.data.frame(info_df[,colSums(is.na(info_df))<nrow(info_df)])
information_list[[n-1]] <- cluster_df
nonzero_clusters <- as.data.frame(cluster_df[,colSums(is.na(cluster_df))<(nrow(cluster_df)-1)])
total_cluster_distances <- 0
if (!is.null(ncol(nonzero_clusters))) {
cluster_dist <- apply(nonzero_clusters, 2, function(x) clusterdistance(length(na.omit(x)), na.omit(x), init_mat)/(length(na.omit(x))))
# cluster_dist <- c(1:ncol(nonzero_clusters))
# for (i in 1:ncol(nonzero_clusters)) {
#   cluster_dist[i] <- mean(make_dist_mat2(length(na.omit(nonzero_clusters[,i])), nonzero_clusters[,i][!is.na(nonzero_clusters[,i])], init_mat)[is.finite(make_dist_mat2(length(na.omit(nonzero_clusters[,i])), nonzero_clusters[,i][!is.na(nonzero_clusters[,i])], init_mat))])
# }
total_cluster_distances <- sum(cluster_dist)
} else {
total_cluster_distances <- mdmat(nonzero_clusters[1], nonzero_clusters[2], all_punts)
}
total_cluster_distances <- total_cluster_distances/ncol(cluster_df)
iteration_scores[n-1, 1] <- ncol(cluster_df)
iteration_scores[n-1, 2] <- total_cluster_distances
iteration_scores$totaloverlap <- iteration_scores$`nclusters`*iteration_scores$`clusteroverlap`
n <- n-1
}
iteration_scores$iteration_scores <- (1/(iteration_scores$`nclusters`/max(iteration_scores$`nclusters`))) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
ggplot(iteration_scores, aes(x=nclusters, y=iteration_scores)) + geom_point()
mincluster
View(result)
list.files("C:/Users/Jay Sagrolikar/punting_analysis/data")
list.files("C:/Users/Jay Sagrolikar/punting_analysis/data")[1]
blocked_punt_event_df <- tracking_sample[tracking_sample$event=="punt_blocked",]
punt_block_event_info_df <- unique(data.frame(gameId=blocked_punt_event_df$gameId, playId=blocked_punt_event_df$playId))
punt_block_denotation <- paste(punt_block_event_info_df$gameId, "/", punt_block_event_info_df$playId, sep="")
setwd("C:/Users/Jay Sagrolikar/punting_analysis/data")
test_df <- read.csv("12iteration.csv")
blocked_punts <- data.frame("identity"=as.vector(punt_block_denotation))
blocked_punts$cluster <- 0
for (i in punt_block_denotation) {
index <- which(test_df==i)
column_number <- ceiling(index/nrow(test_df))
# colnames(test_df)[column_number]
blocked_punts$cluster[which(punt_block_denotation==i)[1]] <- column_number
}
blocked_punt_event_df <- tracking_sample[tracking_sample$event=="punt_blocked",]
punt_block_event_info_df <- unique(data.frame(gameId=blocked_punt_event_df$gameId, playId=blocked_punt_event_df$playId))
punt_block_denotation <- paste(punt_block_event_info_df$gameId, "/", punt_block_event_info_df$playId, sep="")
setwd("C:/Users/Jay Sagrolikar/punting_analysis/testing")
test_df <- read.csv("12iteration.csv")
blocked_punts <- data.frame("identity"=as.vector(punt_block_denotation))
blocked_punts$cluster <- 0
for (i in punt_block_denotation) {
index <- which(test_df==i)
column_number <- ceiling(index/nrow(test_df))
# colnames(test_df)[column_number]
blocked_punts$cluster[which(punt_block_denotation==i)[1]] <- column_number
}
blocked_punts
cluster1_compare <- "2020112212/241"
cluster2_compare <- "2020122003/881"
punts_to_compare <- c(cluster1_compare, cluster2_compare)
setwd("C:/Users/Jay Sagrolikar/punting_analysis/testing")
iteration_df <- data.frame()
frames_to_compare <- c(8,9,10,11,12)
blocked_punt_event_df <- tracking_sample[tracking_sample$event=="punt_blocked",]
punt_block_event_info_df <- unique(data.frame(gameId=blocked_punt_event_df$gameId, playId=blocked_punt_event_df$playId))
punt_block_denotation <- paste(punt_block_event_info_df$gameId, "/", punt_block_event_info_df$playId, sep="")
blocked_punts <- data.frame("identity"=as.vector(punt_block_denotation))
blocked_punts$cluster <- 0
for (n in frames_to_compare) {
test_df <- read.csv(paste(n, "iteration.csv", sep=""))
for (i in punts_to_compare) {
index <- which(test_df==i)
column_number <- ceiling(index/nrow(test_df))
blocked_punts$cluster[which(punt_block_denotation==i)[1]] <- column_number
iteration_df[which(frames_to_compare==n),which(punts_to_compare==i)] <- column_number
}
colnames(iteration_df) <- punts_to_compare
}
###MARKOV CHAIN
for (frame_id in 2:nrow(iteration_df)) {
initial_state <- iteration_df[frame_id-1,]
current_state <- iteration_df[frame_id,]
transition_prob_mat <- matrix(nrow=ncol(initial_state), ncol=ncol(current_state))
for (cluster_id in unique(as.numeric(c(initial_state)))) {
fill_vec <- rep(NA,ncol(current_state))
cluster_transition_vec <- as.numeric(c(current_state[,(which(initial_state==cluster_id))]))
markov_transition_probabilities <- (table(cluster_transition_vec)/length(cluster_transition_vec))
# fill_vec[cluster_transition_vec] <- markov_transition_probabilities
fill_vec[which(current_state==cluster_transition_vec)] <- markov_transition_probabilities
# transition_prob_mat[cluster_id,] <- fill_vec
transition_prob_mat[which(initial_state==cluster_id),] <- fill_vec
print(transition_prob_mat)
}
}
clusters_to_save <- (iteration_scores[order(iteration_scores$iteration_scores),]$`number of clusters`)[(new_n-10):new_n]
sdir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/top10"
for(i in clusters_to_save) {
fname <- paste(as.character(frame_id), "_", as.character(which(clusters_to_save==i)[1]), "scorer.csv")
write.csv(information_list[[i]], paste(sdir, fname, sep=""), row.names = FALSE)
}
if (is.null(result)) {
break
} else {
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
dir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/"
filename <- paste(as.character(frame_id), "iteration.csv", sep="")
fname2 <- paste(as.character(frame_id), "scores.csv")
print("Frame Iteration")
print(frame_id)
# write.csv(result, paste(dir, filename, sep=""), row.names = FALSE)
write.csv(iteration_scores, paste(dir, fname2, sep=""), row.names = FALSE)
}
clusters_to_save
iteration_scores
(iteration_scores[order(iteration_scores$iteration_scores),]$`number of clusters`)[(new_n-10):new_n]
new_n
(iteration_scores[order(iteration_scores$iteration_scores),]$`number of clusters`)[1]
(iteration_scores[order(iteration_scores$iteration_scores),]$`number of clusters`)
iteration_scores$iteration_scores <- (1/(iteration_scores$`nclusters`/max(iteration_scores$`nclusters`))) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
clusters_to_save <- (iteration_scores[order(iteration_scores$iteration_scores),]$`nclusters`)[(new_n-10):new_n]
sdir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/top10"
for(i in clusters_to_save) {
fname <- paste(as.character(frame_id), "_", as.character(which(clusters_to_save==i)[1]), "scorer.csv")
write.csv(information_list[[i]], paste(sdir, fname, sep=""), row.names = FALSE)
}
if (is.null(result)) {
break
} else {
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
dir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/"
filename <- paste(as.character(frame_id), "iteration.csv", sep="")
fname2 <- paste(as.character(frame_id), "scores.csv")
print("Frame Iteration")
print(frame_id)
# write.csv(result, paste(dir, filename, sep=""), row.names = FALSE)
write.csv(iteration_scores, paste(dir, fname2, sep=""), row.names = FALSE)
}
iteration_scores$iteration_scores <- (1/(iteration_scores$`nclusters`/max(iteration_scores$`nclusters`))) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
clusters_to_save <- (iteration_scores[order(iteration_scores$iteration_scores),]$`nclusters`)[(new_n-10):new_n]
sdir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/top10"
for(i in clusters_to_save) {
fname <- paste(as.character(frame_id), "_", as.character(which(clusters_to_save==i)[1]), "scorer.csv", sep="")
write.csv(information_list[[i]], paste(sdir, fname, sep=""), row.names = FALSE)
}
if (is.null(result)) {
break
} else {
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
dir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/"
filename <- paste(as.character(frame_id), "iteration.csv", sep="")
fname2 <- paste(as.character(frame_id), "scores.csv")
print("Frame Iteration")
print(frame_id)
write.csv(result, paste(dir, filename, sep=""), row.names = FALSE)
write.csv(iteration_scores, paste(dir, fname2, sep=""), row.names = FALSE)
}
frame_id
clusters_to_save <- (iteration_scores[order(iteration_scores$iteration_scores),]$`nclusters`)[(new_n-10):new_n]
sdir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/top10/"
for(i in clusters_to_save) {
fname <- paste(as.character(frame_id), "_", as.character(which(clusters_to_save==i)[1]), "scorer.csv", sep="")
write.csv(information_list[[i]], paste(sdir, fname, sep=""), row.names = FALSE)
}
if (is.null(result)) {
break
} else {
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
dir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/"
filename <- paste(as.character(frame_id), "iteration.csv", sep="")
fname2 <- paste(as.character(frame_id), "scores.csv")
print("Frame Iteration")
print(frame_id)
write.csv(result, paste(dir, filename, sep=""), row.names = FALSE)
write.csv(iteration_scores, paste(dir, fname2, sep=""), row.names = FALSE)
}
iteration_scores$iteration_scores <- (1/(iteration_scores$`nclusters`/max(iteration_scores$`nclusters`))) *
(iteration_scores$`clusteroverlap`/max(iteration_scores$`clusteroverlap`))
mincluster <- iteration_scores[iteration_scores$iteration_scores==max(iteration_scores$iteration_scores),]$`nclusters`
finalclusters <- information_list[[mincluster]]
result <- finalclusters
clusters_to_save <- (iteration_scores[order(iteration_scores$iteration_scores),]$`nclusters`)[(new_n-10):new_n]
sdir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/top10/"
for(i in clusters_to_save) {
fname <- paste(as.character(frame_id), "_", as.character(which(clusters_to_save==i)[1]), "scorer.csv", sep="")
write.csv(information_list[[i]], paste(sdir, fname, sep=""), row.names = FALSE)
}
if (is.null(result)) {
break
} else {
for (i in 1:ncol(result)) {
for (j in 1:nrow(result)) {
if (is.na(result[j, i])) {
result[j, i] <- "0"
} else {
result[j, i] <- paste(as.character(all_punts[[3*as.numeric(result[j,i])]]$gameId[1]), "/", as.character(all_punts[[3*as.numeric(result[j,i])]]$playId[1]), sep="")
}
}
}
dir <- "C:/Users/Jay Sagrolikar/punting_analysis/jaccard testing/"
filename <- paste(as.character(frame_id), "iteration.csv", sep="")
fname2 <- paste(as.character(frame_id), "scores.csv")
print("Frame Iteration")
print(frame_id)
write.csv(result, paste(dir, filename, sep=""), row.names = FALSE)
write.csv(iteration_scores, paste(dir, fname2, sep=""), row.names = FALSE)
}
